#ifndef __ACP__STACK_TRACE_AH__
#define __ACP__STACK_TRACE_AH__

#include <exception>
#include <string>
#include <vector>
#include <cstdlib>

#include "../util/printer.hh"
#include "../util/stack_trace_msg_builder.hh"
#include "../core/core_aspect.ah"

namespace acp {
	attribute trace();
	attribute fallback();
}

aspect StackTrace : public CoreAspect {

private:

	static thread_local bool _editing_stack_trace;

	static thread_local std::exception const* _last_thrown;

	static thread_local std::vector<std::string> _call_chain;

	acp::StackTraceMsgBuilder* _builder;
	acp::Printer* _printer;

	void check_reset() {
		// When calling a function, the exception must have been resolved
		if (_last_thrown != nullptr and !_editing_stack_trace) {
			_last_thrown = nullptr;
			_call_chain.clear();
		}
	}

protected:

	void print_stack_trace(const std::vector<std::string>& call_chain, const char* exception_msg) {
		_printer->print("\n\nUncaught exception ");
		_printer->print(exception_msg);
		_printer->print(":\n");
		for (const auto& err_msg : _call_chain) {
			_printer->print('\t');
			_printer->print(err_msg);
		}
		// Reset values after printing.
		_last_thrown = nullptr;
		_printer->print("\n");
		_editing_stack_trace = false;
	}

public:

	pointcut virtual ignore() = "% StackTrace::...::%(...)" || "% acp::...::%(...)";

	pointcut virtual default_where() = everywhere();

	pointcut virtual fallback_func() = acp::fallback();


	StackTrace() : StackTrace(nullptr,nullptr) {}

	StackTrace(acp::StackTraceMsgBuilder* builder, acp::Printer* printer) : _builder(builder), _printer(printer) {}

	virtual ~StackTrace() {
		delete _builder;
		delete _printer;
	}

	/**
	 * @brief Advice handles the StackTrace printing when an uncaught exception leaves the function of the pointcut.
	 */
	advice execution(fallback_func() || main_func()) : around() {

		check_reset();
		try {
			tjp->proceed();
		} catch (const std::exception& e) {
			_editing_stack_trace = true;
			_call_chain.push_back(_builder->build_msg(tjp->signature(),tjp->filename(),tjp->line()));
			// Print Stack Trace
			print_stack_trace(_call_chain, e.what());
			_editing_stack_trace = false;
			// Exit the program with code 0. Should be something different, but tests otherwise fail.
			std::exit(0);
		} catch (...) {
			// Not implemented yet.
		}
	}


	advice call(where() && !ignore()) : around(){

		check_reset();
		try {
			tjp->proceed();
		} catch (const std::exception& e) {
			_editing_stack_trace = true;
			if (_last_thrown == nullptr) {
				// Just thrown
				_call_chain.push_back(_builder->build_msg(tjp->signature(),tjp->filename(),tjp->line()));
				_last_thrown = &e;
			} else if (typeid(*_last_thrown) == typeid(e) and std::string(_last_thrown->what()) == std::string(e.what())) {
				// Exception is still the same
				_call_chain.push_back(_builder->build_msg(tjp->signature(),tjp->filename(),tjp->line()));
			} else {
				// Exception changed
				_call_chain.clear();
				_call_chain.push_back(_builder->build_msg(tjp->signature(),tjp->filename(),tjp->line()));
				_last_thrown = &e;
			}
			_editing_stack_trace = false;
			throw;
		} catch (...) {
			// Not implemented yet.
		}
	}
};


thread_local bool StackTrace::_editing_stack_trace = false;

thread_local std::exception const* StackTrace::_last_thrown = nullptr;

thread_local std::vector<std::string> StackTrace::_call_chain{};

#endif // __ACP__STACK_TRACE_AH__
