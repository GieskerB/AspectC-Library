#ifndef __ACP__INTEGER_OVERFLOW_CHECK_AH__
#define __ACP__INTEGER_OVERFLOW_CHECK_AH__

#include "../core/core_aspect.ah"
#include "../util/overflow_exception.hh"

#include <limits>

namespace acp {
    attribute overflow_check();
}

// TODO DOES NOT WORK WITH UNARY OPERATOR

/**
 * \aspect OverflowCheck
 * \file /src/bug_detection/overflow_check.ah
 * \brief Aspect that checks for null pointer dereferences.
 *
 * This aspect provides an advice to check if a pointer is null before dereferencing it.
 * Unfortunately, it does not work with the -> operator, due to limitations in the AspectC++
 * language and the way the builtin -> operator is defined.
 *
 */
aspect IntegerOverflowCheck : public CoreAspect {

    static constexpr int INT_MAX = std::numeric_limits<int>::max();
    static constexpr int INT_MIN = std::numeric_limits<int>::min();

    pointcut int_add_binary() = builtin("int& operator +=(int&,int)" || "int operator +(int,int)");
    pointcut int_add_unary_inc() = builtin("int operator ++(int&,int)" || "int& operator ++(int&)");
    pointcut int_add_unary() = builtin("int operator +(int)");

    pointcut int_sub_binary() = builtin("int& operator -=(int&,int)" || "int operator -(int,int)");
    pointcut int_sub_unary_inc() = builtin("int operator --(int&,int)" || "int& operator --(int&)");
    pointcut int_sub_unary() = builtin("int operator -(int)");

public:

    IntegerOverflowCheck() {}
    virtual ~IntegerOverflowCheck() = default;

    /**
     * \pointcut where
     * \see :ref:`CoreAspect::where <core_aspect_ah_where>`
     */
    pointcut virtual where() = acp::overflow_check();

    /**
     * \pointcut ignore
     * \see :ref:`CoreAspect::ignore <core_aspect_ah_ignore>`
     */
    pointcut virtual ignore() = within("OverflowCheck") || within("acp");


    advice within(where()) && int_add_binary() && !ignore(): before() {
        const int lhs = *static_cast<int*>(tjp->arg(0));
        const int rhs = *static_cast<int*>(tjp->arg(1));
        if(lhs > INT_MAX - rhs) {
            throw acp::OverflowException(tjp->signature(), tjp->line(), "int", true);
        }
    }

    advice within(where()) && int_add_unary_inc() && !ignore(): before() {
        const int val = *static_cast<int*>(tjp->arg(0));
        if(val == INT_MAX) {
            throw acp::OverflowException(tjp->signature(), tjp->line(), "int", true);
        }
    }

    advice within(where()) && int_add_unary() && !ignore(): before() {
        const int val = *static_cast<int*>(tjp->arg(0));
        if(val == INT_MIN) {
            throw acp::OverflowException(tjp->signature(), tjp->line(), "int", true);
        }
    }

    advice within(where()) && int_sub_binary() && !ignore(): before() {
        const int lhs = *static_cast<int*>(tjp->arg(0));
        const int rhs = *static_cast<int*>(tjp->arg(1));
        if(lhs < INT_MAX + rhs) {
            throw acp::OverflowException(tjp->signature(), tjp->line(), "int", false);
        }
    }

    advice within(where()) && int_sub_unary_inc() && !ignore(): before() {
        const int val = *static_cast<int*>(tjp->arg(0));
        if(val == INT_MIN) {
            throw acp::OverflowException(tjp->signature(), tjp->line(), "int", false);
        }
    }

    advice within(where()) && int_sub_unary() && !ignore(): before() {
        // On unary - operator no underflow can happen, since for every positive signed
        // int value is exactly one negative.
    }

};

#endif // __ACP__INTEGER_OVERFLOW_CHECK_AH__
