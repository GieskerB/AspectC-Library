#ifndef __ACP__OVERFLOW_CHECK_AH__
#define __ACP__OVERFLOW_CHECK_AH__

#include "../core/core_aspect.ah"

namespace acp {
    attribute overflow_check();
}

// TODO DOES NOT WORK WITH UNARY OPERATOR

/**
 * \aspect OverflowCheck
 * \file /src/bug_detection/overflow_check.ah
 * \brief Aspect that checks for null pointer dereferences.
 *
 * This aspect provides an advice to check if a pointer is null before dereferencing it.
 * Unfortunately, it does not work with the -> operator, due to limitations in the AspectC++
 * language and the way the builtin -> operator is defined.
 *
 */
aspect OverflowCheck : public CoreAspect {

    pointcut int_add() = builtin("int operator ++(int&,int)" || "int& operator ++(int&)" || "int& operator +=(int&,int)" || "int operator +(int,int)");

public:

    OverflowCheck() {}
    virtual ~OverflowCheck() = default;

    /**
     * \pointcut where
     * \see :ref:`CoreAspect::where <core_aspect_ah_where>`
     */
    pointcut virtual where() = acp::overflow_check();

    /**
     * \pointcut ignore
     * \see :ref:`CoreAspect::ignore <core_aspect_ah_ignore>`
     */
    pointcut virtual ignore() = within("OverflowCheck") || within("acp");

    /**
     * \advice overflow_check
     * \brief Advice checks if a pointer is null before dereferencing it.
     *
     * If the pointer is null, it throws a `acp::OverflowException` with a message indicating that
     * a null pointer was dereferenced.
     */
    advice within(where()) && int_add() && !ignore(): before() { // && builtin("%& operator *(%*)")

        std::cout << tjp->signature()<< '\n';
    }


};

#endif // __ACP__OVERFLOW_CHECK_AH__
