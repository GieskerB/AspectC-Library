#ifndef __ACP__PROFILER_AH__
#define __ACP__PROFILER_AH__

#include "../core/core_aspect.ah"
#include "../util/printer.hh"
#include "../util/profiler_data.hh"
#include "../util/profiler_msg_builder.hh"

namespace acp {
	attribute profile();
}

aspect Profiler : public CoreAspect {

	static acp::ProfilerMsgBuilder* _builder_static;
	static acp::Printer* _printer_static;
	acp::ProfilerMsgBuilder* _builder;
	acp::Printer* _printer;

public:

    pointcut virtual ignore() = within("Profiler") || within("acp");

    pointcut virtual default_where() = acp::profile();


    Profiler(): Profiler(nullptr,nullptr) {}

    Profiler(acp::ProfilerMsgBuilder* builder , acp::Printer* printer): _builder(builder), _printer(printer) {
		_builder_static = _builder;
		_printer_static = _printer;
	}

	virtual ~Profiler() {
		delete _builder;
		delete _printer;
	}

    advice execution(where()) && !ignore(): around() {
    	static acp::ProfilerData data (JoinPoint::signature());
		const auto start = std::chrono::high_resolution_clock::now();
		tjp->proceed();
		const auto end = std::chrono::high_resolution_clock::now();
		data.m_calls++;
		data.m_exec_time += end - start;
    }

    static void simple_stat () {
		for (acp::ProfilerData *curr = acp::ProfilerData::first (); curr; curr = curr->p_next) {
			std::string output;
			_builder_static->build(*curr, output);
			_printer_static->print(output);
		}
      }

    virtual void (*summary())() {
        return &simple_stat;
      }

    advice execution (main_func()) : after () {
        atexit (summary());
    }

};

acp::ProfilerMsgBuilder* Profiler::_builder_static = nullptr;
acp::Printer* Profiler::_printer_static = nullptr;


#endif // __ACP__PROFILER_AH__
