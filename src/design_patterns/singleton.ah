#ifndef __ACP__SINGLETON_AH__
#define __ACP__SINGLETON_AH__

#include "../core/core_aspect.ah"
#include "../util/thread_controller.hh"

namespace acp {
    /**
     * \attribute singleton
     * \brief This attribute is used to mark classes as singletons.
     */
    attribute singleton();

    slice class ACP_Singleton_Slice {

        static bool acp_singleton_allow_construction;

    public:
        static JoinPoint::That& get_instance() {
            // This part can not be done 100% thread-safe, but it is sufficient for most use cases.
            acp_singleton_allow_construction = true;
            static JoinPoint::That instance{};
            acp_singleton_allow_construction = false;
            return instance;
        }
    };

    slice bool ACP_Singleton_Slice::acp_singleton_allow_construction = false;
}

/**
 * \aspect Singleton
 * \file src/design_patterns/singleton.ah
 * \brief This aspect implements the Singleton design pattern.
 *
 * This aspect ensures that any class annotated with this specific attribute can have only
 * one instance and provides a global access point to that instance. A static get_instance()
 * method is provided to retrieve the instance, and construction of the singleton instance.
 *
 * When calling any constructor of a class annotated with this aspect, a runtime error will
 * be thrown.
 *
 */
aspect Singleton {

    acp::ThreadController* _thread;

    public:

     /**
     * \pointcut default_where
     * \see :ref:`CoreAspect::default_where <core_aspect_ah_default_where>`
     */
    pointcut virtual default_where() = acp::singleton();

    /**
     * \pointcut ignore
     * \see :ref:`CoreAspect::ignore <core_aspect_ah_ignore>`
     */
    pointcut virtual ignore() = within("Singleton") || within("acp");

    Singleton(): Singleton(nullptr) {}
    Singleton(acp::ThreadController* thread): _thread(thread) {}
    virtual ~Singleton() {
        delete _thread;
    };

    /**
     * \advice singleton-slice
     * \brief This advice provides a class with all necessary methods and members
     * to implement the Singleton design pattern.
     */
    advice acp::singleton() : slice acp::ACP_Singleton_Slice;

    /**
     * \advice construction-prevention
     * \brief This advice prevents the construction of a singleton class directly.
     */
    advice construction(acp::singleton()) : around() {
        _thread->acquire_lock();
        if(JoinPoint::That::acp_singleton_allow_construction) {
            tjp->proceed();
            _thread->release_lock();
        } else {
            _thread->release_lock();
            throw std::runtime_error("Singleton construction is not allowed. Use get_instance() instead.");
        }
    }
};

#endif // __ACP__SINGLETON_AH__
